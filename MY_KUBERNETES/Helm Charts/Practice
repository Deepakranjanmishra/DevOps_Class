# Date : 13.7.2024
helm
snap install helm
snap install helm --classic
helm
helm version
helm create myapp
ls
cd myapp/
ls
vi Chart.yaml 
vi values.yaml 
cd charts/
ls
cd ..
cd templates/
ls
vi deployment.yaml 
cd ..
ls
rm -rf charts
ls
rm values.yaml 
rm -rf *
ls
cd ..
ls
rm -rf myapp/
ls
helm create myapp
ls
cd myapp/
ls
rm -rf charts/
rm values.yaml 
cd templates/
ls
rm -rf *
ls
cd ..
ls
cd ..
ls
alias k=kubectl
k get all
k create deploy mydeploy --image=nginx --port=80 --replicas=5 -o yaml > deploy.yaml
ls
cd myapp/
ls
pwd
cd .
cd ..
pwd
ls
cd myapp/
cp ~/deploy.yaml .
cd ..
pwd
exit
ls
pwd 
cd myapp/
ls
cp /home/labsuser/deploy.yaml .
ls
vi deploy.yaml 
cd ..
ls
vi deploy.yaml 
k create deploy mydeploy --image=nginx --port=80 --replicas=5 -o yaml > deploy.yaml
alias k=kubectl
k create deploy mydeploy --image=nginx --port=80 --replicas=5 -o yaml > deploy.yaml
k create deploy mydeploy --image=nginx --port=80 --replicas=5 --dry-run=client -o yaml > deploy.yaml
ls
vi deploy.yaml 
cd myapp/
ls
rm deploy.yaml 
ls
vi deploy.yaml 
cd ..
pwd
ls
vi test.yaml
cp ./test.yaml  /home/labsuser/myapp/
cd myapp/
ls
rm test.yaml 
ls
vi deploy.yaml 
ls
vi values.yaml
pwd
pwd
k expose po nginx --name mysvc --type=NodePort --port=80 --target-port=80  -o yaml > service.yaml
k get all
kubectl create service nodeport my-ns --tcp=5678:8080 -o yaml > service.yaml
ls
pwd
cd myapp/
ls
cp /home/labsuser/service.yaml .
ls
vi service.yaml 
cd ..
kubectl create service nodeport my-ns --tcp=5678:8080 -o yaml > service.yaml --dry-run=client
ls
vi service.yaml 
cp ./service.yaml /home/labsuser/myapp
cd myapp/
ls
vi service.yaml 
vi values.yaml
vi service.yaml 
vi deploy.yaml 
vi service.yaml 
ls
cp ./service.yaml  templates/
cd templates/
ls
mv /home/labsuser/myapp/deploy.yaml .
ls
vi deploy.yaml 
vi service.yaml 
cd ../..
pwd
helm template myapp myapp/
k get all
k delete deploy mydeploy 
k delete service my-ns
k get all
helm list
helm install myapp myapp/
helm list
k get all
vi values.yaml
ls
k get no -o wide
curl 172.31.18.174:31404
................................................................................................
ls
cd myapp/
ls
vi service.yaml 
cd templates/
ls
vi deploy.yaml 
ls
cd myapp/
ls
vi values.yaml 
helm install myapp myapp/
history | cut -c 8-
root@Master:/home/labsuser/myapp# 

helm install chart-myapp --generate-name


helm uninstall chart-myapp
kubectl get all
kubectl delete deployment.apps/myapp service/myapp
cd ..
helm install chart-myapp --generate-name
ls
helm install chart-myapp 
helm install chart-myapp --generate-name
kubectl get all
kubectl delete service/myapp
helm uninstall chart-myapp-1720883885
helm list
helm uninstall chart-myapp-1720883556
helm list
helm uninstall myapp
helm list
history | cut -c 8-

helm install [release-name] [chart]

............................................................................................................................

# DATE : 14. 7 . 2024
#  HELM PRACTICE
helm
helm version
helm create mychart
ls
cd mychart/
ls
cd charts/
ls
cd ..
rm -rf charts/
ls
cd templates/
ls
rm -rf *
ls
cd ..
rm values.yaml 
ls
cd templates/
vi deploy.yaml
vi service.yaml
cd ..
values.yaml
vi values.yaml
cd templates/
ls
vi service.yaml 
cd ..
helm list
cd ..

helm template  mychart/

or

helm template myapp mychart/ # name given by us is myapp this can be anything

output :.........................................................
---
# Source: mychart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: myapp
  name: myapp
spec:
  ports:
  - name: myapp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: myapp
  type: NodePort
status:
  loadBalancer: {}
---
# Source: mychart/templates/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: myapp
  name: myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: myapp
    spec:
      containers:
      - image: nginx:latest
        name: myapp
        ports:
        - containerPort: 80
        resources: {}
status: {}

...................................................................................................

helm install release-name mychart/
helm list
kubectl get all
kubectl get no -o wide
curl 172.31.18.174:31271  # THE ABOVE COMMAND WILL DISPLAY THE NGINX PAGE

RUN ANOTHER MICRO SERVICE " your app "

cp -R mychart/ yourchart
ls
cd yourchart/
ls
vi values.yaml 
vi Chart.yaml 
cd ..
helm template yourchart/
helm install your-release yourchart/
helm list
kubectl get all
kubectl get no -o wide
curl 172.31.18.174:30219


# DATE : 15.7.2024
ls
vi mychart/values.yaml 
helm list
 helm upgrade release-name mychart/

Output:.........................
Release "release-name" has been upgraded. Happy Helming!
NAME: release-name
LAST DEPLOYED: Mon Jul 15 13:19:16 2024
NAMESPACE: default
STATUS: deployed
REVISION: 2
TEST SUITE: None
...............................................
helm list
kubectl get all
kubectl get po
kubectl describe po myapp-766cdd4648-4c8vf 

helm uninstall RELEASE_NAME [...] [flags]

Use the '--dry-run' flag to see which releases will be uninstalled without actually uninstalling them.

helm list
helm uninstall release-name
helm list
kubectl get all

vi yourchart/values.yaml 
helm list
helm upgrade your-release yourchart/
kubectl get all


kubectl get all
# Delete older stuffs
helm list
helm uninstall your-release
helm list
helm install my-release oci://registry-1.docker.io/bitnamicharts/mysql
helm list
kubectl get all
kubectl describe po pod/my-release-mysql-0
kubectl describe pod/my-release-mysql-0
kubectl get pvc
kubectl get pv
kubectl unbound pv safari-pv
kubectl delete pvc project-tiger/safari-pvc
kubectl delete pvc safari-pvc
kubectl get pv
ls
helm list
cd mysql-11.1.9




