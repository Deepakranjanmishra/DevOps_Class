vi ~/.kube/config 
cat ~/.kube/config # TO SEE THE CONTENTS OF A KUBECONFIG FILE

# Create private key for new USER 
openssl genrsa -out john.key 2048
ls
vi john.key 

# Create a CertificateSigningRequest/CSR
openssl req -new -key john.key -out john.csr -subj "/CN=john/O=examplegroup"
ls
vi john.csr 

# Sign csr with CA certs
openssl x509 -req -in john.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key  -CAcreateserial -out john.crt
ls
vi john.crt 
pwd
ls -al
pwd

# Update/Add john certs in config file/ Set Credentials
k config set-credentials john --client-certificate=/home/labsuser/john.crt --client-key=/home/labsuser/john.key 
vi ~/.kube/config

# Create context for new user
k get all
kubectl config set-context mycontext --user=john --cluster=kubernetes
vi ~/.kube/config

# Create role
vi role.yaml
``````````````````````````````````````
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
        name: myrole
        namespace: default
rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["list", "watch", "get"]
````````````````````````````````````````````````
kubectl apply -f role.yaml
kubectl get role

# Create role binding
kubectl create rolebinding myrolebinding --role=myrole --user=john
kubectl get po
ls

# SWITCH USER or Switch the context that we created for new user and validate
kubectl config use-context mycontext
kubectl get po
kubectk get deployment
kubectl get ds
kubectl api-resources

                                   # MY PRACTICE

# SWITCH TO ADMIN USER
kubectl config use-context kubernetes-admin@kubernetes     # Admin context name -> kubernetes-admin@kubernetes
kubectl run nginx1 --image=nginx --port=80
kubectl get po
kubectk get deployment
kubectl get ds
k get role
kubectl get role
vi role.yaml 
kubectl delete role myrole
kubectl apply -f role.yaml 
kubectl config use-context mycontext
kubectl create ns myns
vi role.yaml 
k delete role my role
kubectl delete role my role
kubectl config use-context kubernetes-admin@kubernetes
kubectl delete role myrole
vi role.yaml 
alias k=kubectl
k apply -f role.yaml 
kubectl config use-context mycontext
k create ns myns
kubectl run nginx2 --image=nginx --port=80
k get po
k get ns

kubectl config -h
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Output:-

Modify kubeconfig files using subcommands like "kubectl config set current-context my-context".

 The loading order follows these rules:

  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes
place.
  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for
your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When
a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the
last file in the list.
  3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.

```````````````````````````````````````````````````````````````````````````Available Commands:```````````````````````````````````````````````````````````
  current-context   Display the current-context
  delete-cluster    Delete the specified cluster from the kubeconfig
  delete-context    Delete the specified context from the kubeconfig
  delete-user       Delete the specified user from the kubeconfig
  get-clusters      Display clusters defined in the kubeconfig
  get-contexts      Describe one or many contexts
  get-users         Display users defined in the kubeconfig
  rename-context    Rename a context from the kubeconfig file
  set               Set an individual value in a kubeconfig file
  set-cluster       Set a cluster entry in kubeconfig
  set-context       Set a context entry in kubeconfig
  set-credentials   Set a user entry in kubeconfig
  unset             Unset an individual value in a kubeconfig file
  use-context       Set the current-context in a kubeconfig file
  view              Display merged kubeconfig settings or a specified kubeconfig file

Usage:
  kubectl config SUBCOMMAND [options]

Use "kubectl config <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
`````````````````````````````````````````````````````````````````````````````````````````````````

kubectl config current-context

# shows all the resources, verbs and associated API-group.

kubectl api-resources -o wide

 kubectl api-resources --namespaced #  -â€“namespaced only returns API resources that are namespaced

````````Output`````````````````````````````````````````````````````````````````````````````````````````````````

NAME                        SHORTNAMES   APIVERSION                     NAMESPACED   KIND
bindings                                 v1                             true         Binding
configmaps                  cm           v1                             true         ConfigMap
endpoints                   ep           v1                             true         Endpoints
events                      ev           v1                             true         Event
limitranges                 limits       v1                             true         LimitRange
persistentvolumeclaims      pvc          v1                             true         PersistentVolumeClaim
pods                        po           v1                             true         Pod
podtemplates                             v1                             true         PodTemplate
replicationcontrollers      rc           v1                             true         ReplicationController
resourcequotas              quota        v1                             true         ResourceQuota
secrets                                  v1                             true         Secret
serviceaccounts             sa           v1                             true         ServiceAccount
services                    svc          v1                             true         Service
controllerrevisions                      apps/v1                        true         ControllerRevision
daemonsets                  ds           apps/v1                        true         DaemonSet
deployments                 deploy       apps/v1                        true         Deployment
replicasets                 rs           apps/v1                        true         ReplicaSet
statefulsets                sts          apps/v1                        true         StatefulSet
localsubjectaccessreviews                authorization.k8s.io/v1        true         LocalSubjectAccessReview
horizontalpodautoscalers    hpa          autoscaling/v2                 true         HorizontalPodAutoscaler
cronjobs                    cj           batch/v1                       true         CronJob
jobs                                     batch/v1                       true         Job
leases                                   coordination.k8s.io/v1         true         Lease
networkpolicies                          crd.projectcalico.org/v1       true         NetworkPolicy
networksets                              crd.projectcalico.org/v1       true         NetworkSet
endpointslices                           discovery.k8s.io/v1            true         EndpointSlice
events                      ev           events.k8s.io/v1               true         Event
ingresses                   ing          networking.k8s.io/v1           true         Ingress
networkpolicies             netpol       networking.k8s.io/v1           true         NetworkPolicy
poddisruptionbudgets        pdb          policy/v1                      true         PodDisruptionBudget
rolebindings                             rbac.authorization.k8s.io/v1   true         RoleBinding
roles                                    rbac.authorization.k8s.io/v1   true         Role
csistoragecapacities                     storage.k8s.io/v1              true         CSIStorageCapacity
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````


 kubectl api-resources --help

``````````````````````````````````````````````````````````````````````````````````````````````````````````````
Print the supported API resources on the server.

Examples:
  # Print the supported API resources
  kubectl api-resources
  
  # Print the supported API resources with more information
  kubectl api-resources -o wide
  
  # Print the supported API resources sorted by a column
  kubectl api-resources --sort-by=name
  
  # Print the supported namespaced resources
    kubectl api-resources --namespaced=true
  
  # Print the supported non-namespaced resources
  kubectl api-resources --namespaced=false
  
  # Print the supported API resources with a specific APIGroup
  kubectl api-resources --api-group=rbac.authorization.k8s.io
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

